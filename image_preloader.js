// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.ImagePreloader = (function() {

    function ImagePreloader(options) {
      if (options == null) {
        options = {};
      }
      this.onImageLoad = __bind(this.onImageLoad, this);

      this.start = __bind(this.start, this);

      this.loadedImageCount = 0;
      this.urls = options.urls || [];
      this.onImageLoadCallback = options.onImageLoad;
      this.onCompleteCallback = options.onComplete;
    }

    ImagePreloader.prototype.start = function() {
      var image, imageUrl, _i, _len, _ref, _results, _this;
      _this = this;
      _ref = this.urls;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        imageUrl = _ref[_i];
        image = new Image();
        image.onabort = function() {
          return _this.onImageLoad(this.src);
        };
        image.onerror = function() {
          return _this.onImageLoad(this.src);
        };
        image.onload = function() {
          return _this.onImageLoad(this.src);
        };
        _results.push(image.src = imageUrl);
      }
      return _results;
    };

    ImagePreloader.prototype.onImageLoad = function(url) {
      var details;
      this.loadedImageCount += 1;
      details = {
        url: url,
        loadedImageCount: this.loadedImageCount,
        totalImageCount: this.urls.length
      };
      if (typeof this.onImageLoadCallback === "function") {
        this.onImageLoadCallback(details);
      }
      if (this.loadedImageCount >= this.urls.length) {
        return typeof this.onCompleteCallback === "function" ? this.onCompleteCallback(this.urls) : void 0;
      }
    };

    return ImagePreloader;

  })();

}).call(this);
